import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Calendar, Users, Bell, BarChart3, DollarSign, Clock, TrendingUp, AlertCircle } from "lucide-react";

const Dashboard = () => {
  const stats = [
    {
      title: "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏",
      value: "12",
      change: "+3 —Å –≤—á–µ—Ä–∞",
      icon: Calendar,
      color: "text-primary"
    },
    {
      title: "–î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü",
      value: "‚ÇΩ340,000",
      change: "+12% –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É",
      icon: DollarSign,
      color: "text-accent"
    },
    {
      title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã",
      value: "248",
      change: "+18 –Ω–æ–≤—ã—Ö",
      icon: Users,
      color: "text-primary"
    },
    {
      title: "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å",
      value: "85%",
      change: "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è",
      icon: TrendingUp,
      color: "text-primary"
    }
  ];

  const todayAppointments = [
    {
      time: "09:00",
      client: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      pet: "–ú–∞–∫—Å (–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ä–µ—Ç—Ä–∏–≤–µ—Ä)",
      service: "–ü–æ–ª–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥",
      duration: "2 —á–∞—Å–∞",
      status: "confirmed"
    },
    {
      time: "11:30",
      client: "–ò–≥–æ—Ä—å –°–º–∏—Ä–Ω–æ–≤", 
      pet: "–ë–µ–ª–ª–∞ (–ô–æ—Ä–∫—à–∏—Ä—Å–∫–∏–π —Ç–µ—Ä—å–µ—Ä)",
      service: "–°—Ç—Ä–∏–∂–∫–∞ –∫–æ–≥—Ç–µ–π",
      duration: "30 –º–∏–Ω",
      status: "in-progress"
    },
    {
      time: "14:00",
      client: "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
      pet: "–†–µ–∫—Å (–ù–µ–º–µ—Ü–∫–∞—è –æ–≤—á–∞—Ä–∫–∞)",
      service: "–ú—ã—Ç—å–µ –∏ —Å—É—à–∫–∞",
      duration: "1 —á–∞—Å",
      status: "upcoming"
    },
    {
      time: "16:30",
      client: "–ú–∏—Ö–∞–∏–ª –í–æ–ª–∫–æ–≤",
      pet: "–õ—é—Å—è (–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è –∫–æ—à–∫–∞)",
      service: "–ü–æ–ª–Ω—ã–π –≥—Ä—É–º–∏–Ω–≥",
      duration: "1.5 —á–∞—Å–∞",
      status: "upcoming"
    }
  ];

  const recentActivity = [
    {
      action: "–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å",
      details: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞ –∑–∞–ø–∏—Å–∞–ª–∞ –ë–æ–±–∏–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
      time: "5 –º–∏–Ω –Ω–∞–∑–∞–¥",
      type: "booking"
    },
    {
      action: "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω",
      details: "‚ÇΩ3,500 –æ—Ç –ê–Ω–Ω—ã –ü–µ—Ç—Ä–æ–≤–æ–π",
      time: "15 –º–∏–Ω –Ω–∞–∑–∞–¥", 
      type: "payment"
    },
    {
      action: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      details: "SMS –ò–≥–æ—Ä—é –°–º–∏—Ä–Ω–æ–≤—É –æ –∑–∞–ø–∏—Å–∏",
      time: "1 —á–∞—Å –Ω–∞–∑–∞–¥",
      type: "reminder"
    },
    {
      action: "–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤",
      details: "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –æ—Ç –ï–ª–µ–Ω—ã –ö–æ–∑–ª–æ–≤–æ–π",
      time: "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥",
      type: "review"
    }
  ];

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "confirmed":
        return <Badge className="bg-primary/10 text-primary">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</Badge>;
      case "in-progress":
        return <Badge className="bg-accent/10 text-accent">–í –ø—Ä–æ—Ü–µ—Å—Å–µ</Badge>;
      case "upcoming":
        return <Badge variant="outline">–û–∂–∏–¥–∞–µ—Ç</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getActivityIcon = (type: string) => {
    switch (type) {
      case "booking":
        return <Calendar className="w-4 h-4 text-primary" />;
      case "payment":
        return <DollarSign className="w-4 h-4 text-accent" />;
      case "reminder":
        return <Bell className="w-4 h-4 text-muted-foreground" />;
      case "review":
        return <BarChart3 className="w-4 h-4 text-primary" />;
      default:
        return <AlertCircle className="w-4 h-4 text-muted-foreground" />;
    }
  };

  return (
    <div className="space-y-8">
      {/* Welcome Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üëã
          </h1>
          <p className="text-muted-foreground mt-2">
            –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –ø–∏—Ç–æ–º—Ü–∞–º–∏
          </p>
        </div>
        <div className="flex gap-3">
          <Button variant="outline">
            <Calendar className="w-4 h-4 mr-2" />
            –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å
          </Button>
          <Button variant="hero">
            <Users className="w-4 h-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
          </Button>
        </div>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat, index) => (
          <Card key={index} className="hover:shadow-glow transition-all duration-300 hover:scale-105 bg-card-gradient">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-muted-foreground">
                {stat.title}
              </CardTitle>
              <stat.icon className={`w-5 h-5 ${stat.color}`} />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-foreground">{stat.value}</div>
              <p className="text-xs text-muted-foreground mt-1">
                {stat.change}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="grid lg:grid-cols-3 gap-8">
        {/* Today's Appointments */}
        <div className="lg:col-span-2">
          <Card className="shadow-card hover:shadow-glow transition-all duration-300">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Clock className="w-5 h-5 text-primary" />
                –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
              </CardTitle>
              <CardDescription>
                –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {todayAppointments.length}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {todayAppointments.map((appointment, index) => (
                  <div key={index} className="flex items-center justify-between p-4 rounded-lg border bg-muted/30 hover:bg-muted/50 transition-colors">
                    <div className="space-y-1">
                      <div className="flex items-center gap-3">
                        <div className="font-semibold text-lg text-foreground">
                          {appointment.time}
                        </div>
                        {getStatusBadge(appointment.status)}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        <div className="font-medium text-foreground">{appointment.client}</div>
                        <div>{appointment.pet}</div>
                        <div className="flex items-center gap-2 mt-1">
                          <span>{appointment.service}</span>
                          <span className="text-xs bg-primary/10 text-primary px-2 py-1 rounded">
                            {appointment.duration}
                          </span>
                        </div>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      –î–µ—Ç–∞–ª–∏
                    </Button>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Recent Activity */}
        <div>
          <Card className="shadow-card hover:shadow-glow transition-all duration-300">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="w-5 h-5 text-primary" />
                –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {recentActivity.map((activity, index) => (
                  <div key={index} className="flex items-start gap-3 p-3 rounded-lg hover:bg-muted/50 transition-colors">
                    <div className="mt-1">
                      {getActivityIcon(activity.type)}
                    </div>
                    <div className="space-y-1 flex-1">
                      <div className="text-sm font-medium text-foreground">
                        {activity.action}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {activity.details}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {activity.time}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Quick Actions */}
      <Card className="shadow-card">
        <CardHeader>
          <CardTitle>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</CardTitle>
          <CardDescription>
            –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <Button variant="premium" className="h-20 flex-col gap-2">
              <Calendar className="w-6 h-6" />
              <span>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</span>
            </Button>
            <Button variant="premium" className="h-20 flex-col gap-2">
              <Users className="w-6 h-6" />
              <span>–ö–ª–∏–µ–Ω—Ç—ã</span>
            </Button>
            <Button variant="premium" className="h-20 flex-col gap-2">
              <Bell className="w-6 h-6" />
              <span>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</span>
            </Button>
            <Button variant="premium" className="h-20 flex-col gap-2">
              <BarChart3 className="w-6 h-6" />
              <span>–û—Ç—á–µ—Ç—ã</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Dashboard;